{"code":"import { TrackConfig } from \"../type\";\r\nimport { createHistoryEvent } from \"../utils/pv\";\r\nconst MouseEventList = [\"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"wheel\", \"contextmenu\"];\r\nexport default class Tracker {\r\n    constructor(options) {\r\n        this.data = Object.assign(this.initDef(), options);\r\n        this.installTracker();\r\n    }\r\n    // 初始化参数\r\n    initDef() {\r\n        // history模式下pushState和replaceState无法监听到，需要重写方法\r\n        window.history['pushState'] = createHistoryEvent('pushState');\r\n        window.history['replaceState'] = createHistoryEvent('replaceState');\r\n        return {\r\n            sdkVersion: TrackConfig.version,\r\n            historyTracker: false,\r\n            hashTracker: false,\r\n            domTracker: false,\r\n            jsError: false,\r\n        };\r\n    }\r\n    // 自动上报\r\n    captureEvent(MouseEventList, targetKey, data) {\r\n        MouseEventList.forEach(event => {\r\n            window.addEventListener(event, () => {\r\n                console.log('监听');\r\n                this.reportTracker({ event, targetKey, data });\r\n            });\r\n        });\r\n    }\r\n    // 手动上报\r\n    sendTracker(data) {\r\n        this.reportTracker(data);\r\n    }\r\n    installTracker() {\r\n        if (this.data.historyTracker) {\r\n            // targetKey自行定义\r\n            this.captureEvent(['pushState', 'replaceState', 'popState'], 'history-pv');\r\n        }\r\n        if (this.data.hashTracker) {\r\n            this.captureEvent(['hashchange'], 'hash-pv');\r\n        }\r\n        if (this.data.domTracker) {\r\n            this.targetKeyReport();\r\n        }\r\n        if (this.data.jsError) {\r\n            this.errorReport();\r\n        }\r\n    }\r\n    reportTracker(data) {\r\n        const params = Object.assign(this.data, data, { time: new Date().getTime() });\r\n        const headers = {\r\n            type: 'application/x-www-form-urlencoded',\r\n        };\r\n        const blob = new Blob([JSON.stringify(params)], headers);\r\n        navigator.sendBeacon(this.data.requestUrl, blob);\r\n    }\r\n    setUuid(val) {\r\n        this.data.uuid = val;\r\n    }\r\n    setExtra(val) {\r\n        this.data.extra = val;\r\n    }\r\n    // dom上报\r\n    targetKeyReport() {\r\n        MouseEventList.forEach(event => {\r\n            document.addEventListener(event, e => {\r\n                const target = e.target;\r\n                const targetKey = target.getAttribute('track-key');\r\n                if (targetKey) {\r\n                    this.reportTracker({ event, targetKey });\r\n                }\r\n            });\r\n        });\r\n    }\r\n    // js error上报\r\n    jsErrorReport() {\r\n        window.addEventListener('error', e => {\r\n            this.reportTracker({ event: 'error', targetKey: 'error', message: e.message });\r\n        });\r\n    }\r\n    // promise错误上报\r\n    promiseErrorReport() {\r\n        window.addEventListener('unhandledrejection', event => {\r\n            event.promise.catch(error => {\r\n                this.reportTracker({ event: 'promise', targetKey: 'unhandledrejection', message: error });\r\n            });\r\n        });\r\n    }\r\n    errorReport() {\r\n        this.jsErrorReport();\r\n        this.promiseErrorReport();\r\n    }\r\n}\r\n","references":["D:/track-sdk/src/type/index.ts","D:/track-sdk/src/utils/pv.ts"]}
