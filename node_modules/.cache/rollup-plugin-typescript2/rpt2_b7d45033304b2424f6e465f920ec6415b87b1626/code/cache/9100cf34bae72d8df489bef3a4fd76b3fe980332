{"code":"import { TrackConfig } from \"../type\";\r\nimport { createHistoryEvent } from \"../utils/pv\";\r\nvar MouseEventList = [\"click\", \"dblclick\", \"mousedown\", \"mousemove\", \"mouseout\", \"mouseover\", \"mouseup\", \"wheel\", \"contextmenu\"];\r\nvar Tracker = /** @class */ (function () {\r\n    function Tracker(options) {\r\n        this.data = Object.assign(this.initDef(), options);\r\n        this.installTracker();\r\n    }\r\n    // 初始化参数\r\n    Tracker.prototype.initDef = function () {\r\n        // history模式下pushState和replaceState无法监听到，需要重写方法\r\n        window.history['pushState'] = createHistoryEvent('pushState');\r\n        window.history['replaceState'] = createHistoryEvent('replaceState');\r\n        return {\r\n            sdkVersion: TrackConfig.version,\r\n            historyTracker: false,\r\n            hashTracker: false,\r\n            domTracker: false,\r\n            jsError: false\r\n        };\r\n    };\r\n    // 自动上报\r\n    Tracker.prototype.captureEvent = function (MouseEventList, targetKey, data) {\r\n        var _this = this;\r\n        MouseEventList.forEach(function (event) {\r\n            window.addEventListener(event, function () {\r\n                console.log('监听');\r\n                _this.reportTracker({ event: event, targetKey: targetKey, data: data });\r\n            });\r\n        });\r\n    };\r\n    // 手动上报\r\n    Tracker.prototype.sendTracker = function (data) {\r\n        this.reportTracker(data);\r\n    };\r\n    Tracker.prototype.installTracker = function () {\r\n        if (this.data.historyTracker) {\r\n            // targetKey自行定义\r\n            this.captureEvent(['pushState', 'replaceState', 'popState'], 'history-pv');\r\n        }\r\n        if (this.data.hashTracker) {\r\n            this.captureEvent(['hashchange'], 'hash-pv');\r\n        }\r\n        if (this.data.domTracker) {\r\n            this.targetKeyReport();\r\n        }\r\n        if (this.data.jsError) {\r\n            this.errorReport();\r\n        }\r\n    };\r\n    Tracker.prototype.reportTracker = function (data) {\r\n        var params = Object.assign(this.data, data, { time: new Date().getTime() });\r\n        var headers = {\r\n            type: 'application/x-www-form-urlencoded'\r\n        };\r\n        var blob = new Blob([JSON.stringify(params)], headers);\r\n        navigator.sendBeacon(this.data.requestUrl, blob);\r\n    };\r\n    Tracker.prototype.setUuid = function (val) {\r\n        this.data.uuid = val;\r\n    };\r\n    Tracker.prototype.setExtra = function (val) {\r\n        this.data.extra = val;\r\n    };\r\n    // dom上报\r\n    Tracker.prototype.targetKeyReport = function () {\r\n        var _this = this;\r\n        MouseEventList.forEach(function (event) {\r\n            document.addEventListener(event, function (e) {\r\n                var target = e.target;\r\n                var targetKey = target.getAttribute('track-key');\r\n                if (targetKey) {\r\n                    _this.reportTracker({ event: event, targetKey: targetKey });\r\n                }\r\n            });\r\n        });\r\n    };\r\n    // js error上报\r\n    Tracker.prototype.jsErrorReport = function () {\r\n        var _this = this;\r\n        window.addEventListener('error', function (e) {\r\n            _this.reportTracker({ event: 'error', targetKey: 'error', message: e.message });\r\n        });\r\n    };\r\n    // promise错误上报\r\n    Tracker.prototype.promiseErrorReport = function () {\r\n        var _this = this;\r\n        window.addEventListener('unhandledrejection', function (event) {\r\n            event.promise[\"catch\"](function (error) {\r\n                _this.reportTracker({ event: 'promise', targetKey: 'unhandledrejection', message: error });\r\n            });\r\n        });\r\n    };\r\n    Tracker.prototype.errorReport = function () {\r\n        this.jsErrorReport();\r\n        this.promiseErrorReport();\r\n    };\r\n    return Tracker;\r\n}());\r\nexport default Tracker;\r\n","references":["D:/track-sdk/src/type/index.ts","D:/track-sdk/src/utils/pv.ts"]}
